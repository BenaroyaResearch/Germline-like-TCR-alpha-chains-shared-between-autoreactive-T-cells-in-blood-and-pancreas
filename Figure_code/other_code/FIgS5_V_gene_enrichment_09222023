rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder contains data required to generate figures

## get islet TCR seqs from Maki Nakayama, MAKI.NAKAYAMA@CUANSCHUTZ.EDU

mn = read.xls("220519_scPCR_Illumina.xlsx", stringsAsFactors = F)
mn$barcode = seq(1, nrow(mn), by = 1)
mn$alphaChain = paste(mn$Vgene, mn$Junction, mn$Jgene, sep = "_")
mn$betaChain = paste(mn$Vgene.2, mn$Junction.2, mn$Jgene.2, sep = "_")

comId = c("barcode", "Illumina", "Group", "Case_Tissue", "Subset", "Cell.ID" )
traId = c("Vgene", "Jgene", "Junction", "frame",  "Case_Tissue")
trbId = c("Vgene.2", "Jgene.2", "Junction.2", "frame.2", "Case_Tissue")

mnA = mn[,c(comId, traId)]
mnB = mn[,c(comId, trbId)]

colnames(mnA) = c(comId, "v_gene", "j_gene", "junction", "frame", "Case_Tissue")
colnames(mnB) = c(comId, "v_gene", "j_gene", "junction", "frame", "Case_Tissue")

mnTcrs = rbind(mnA, mnB) # 18684
mnTcrs = subset(mnTcrs, frame == "in-frame") # 14049

length(unique(mnTcrs$junction)) # 9798  

mnTcrs.u = mnTcrs[!duplicated(mnTcrs$junction),] # 9798 

## load HLA for mn seqs

mnHla = read.xls("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/HLA_Typing.xlsx")

## bring patients IDs into harmony
mnHla$Sample.ID = gsub(" ", "", mnHla$Sample.ID)
mnHla$Sample.ID = gsub("IIDP", "iidp", mnHla$Sample.ID)
mn$Case_Tissue = gsub("_islets", "", mn$Case_Tissue)
mn$Case_Tissue = gsub("_Islets", "", mn$Case_Tissue)

mnTcrs$Case_Tissue = gsub("_islets", "", mnTcrs$Case_Tissue)
mnTcrs$Case_Tissue = gsub("_Islets", "", mnTcrs$Case_Tissue)

mnTcrs$drb1 = mnHla$DRB1[match(mnTcrs$Case_Tissue, mnHla$Sample.ID)]
mnTcrs$drb1.1 = mnHla$DRB1.1[match(mnTcrs$Case_Tissue, mnHla$Sample.ID)]

hla0401 = subset(mnTcrs, mnTcrs$drb1 %in% grep("04:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("04:01", mnTcrs$drb1.1, value = T))
hla0301 = subset(mnTcrs, mnTcrs$drb1 %in% grep("03:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("03:01", mnTcrs$drb1.1, value = T))
hla0404 = subset(mnTcrs, mnTcrs$drb1 %in% grep("04:04", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("04:04", mnTcrs$drb1.1, value = T))
hla0101 = subset(mnTcrs, mnTcrs$drb1 %in% grep("01:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("01:01", mnTcrs$drb1.1, value = T))

mnTcrs$hla = ifelse(mnTcrs$drb1 %in% grep("03:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("03:01", mnTcrs$drb1.1, value = T), "03:01", 
				ifelse(mnTcrs$drb1 %in% grep("07:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("07:01", mnTcrs$drb1.1, value = T),
"07:01", 				
					ifelse(mnTcrs$drb1 %in% grep("04:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("04:01", mnTcrs$drb1.1, value = T), "04:01",
						ifelse(mnTcrs$drb1 %in% grep("01:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("01:01", mnTcrs$drb1.1, value = T), "01:01", "other"))))
						
mn$hla = mnTcrs$hla[match(mn$Case_Tissue, mnTcrs$Case_Tissue)]

## reformant Maki's TCRs

comId = c("barcode", "Illumina", "Group", "Case_Tissue", "Subset", "Cell.ID", "hla" )
traId = c("Vgene", "Jgene", "Junction", "frame")
trbId = c("Vgene.2", "Jgene.2", "Junction.2", "frame.2")

mnA = mn[,c(comId, traId)]
mnB = mn[,c(comId, trbId)]

mnA = mnA[c("barcode", "Vgene", "Jgene", "Junction", "frame", "hla")]
mnB = mnB[c("barcode", "Vgene.2", "Jgene.2", "Junction.2", "frame.2", "hla")]

colnames(mnA) = c("barcode", "v_gene", "j_gene", "junction", "frame", "hla")
colnames(mnB) = c("barcode", "v_gene", "j_gene", "junction", "frame", "hla")

mnTcrs = rbind(mnA, mnB) # 18684
mnTcrs = subset(mnTcrs, frame == "in-frame") # 14049

length(unique(mnTcrs$junction)) # 9798  

mnTcrs.u = mnTcrs[!duplicated(mnTcrs$junction),] # 9798 

mn.u = mn[!duplicated(mn$alphaChain),]

## overlap of unique junctions

#######################
## differences in V gene enrichment

## load mismatches

lev = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)

levSub = subset(lev, lv <2); nrow(levSub) # 1389

## load IMGT data

imgt = read.delim("3_Nt-sequences.txt", stringsAsFactors = F)

imgt$lenN = nchar(imgt$N.REGION) + nchar(imgt$N1.REGION)
imgt$lenJunc = nchar(imgt$JUNCTION) 
imgt$threeVRegion = nchar(imgt$X3.V.REGION) 
imgt$fiveJRegion = nchar(imgt$X5.J.REGION) 
imgt$JRegion = nchar(imgt$J.REGION) 
imgt$cdr1 = nchar(imgt$CDR1.IMGT)
imgt$cdr2 = nchar(imgt$CDR2.IMGT)
imgt$cdr3 = nchar(imgt$CDR3.IMGT)
imgt$fr1 = nchar(imgt$FR1.IMGT)
imgt$fr2 = nchar(imgt$FR2.IMGT)
imgt$fr3 = nchar(imgt$FR3.IMGT)
imgt$fr4 = nchar(imgt$FR4.IMGT)

imgt$chainType = ifelse(imgt$V.GENE.and.allele %in% grep("TRA", imgt$V.GENE.and.allele, value = T), "TRA", 
					ifelse(imgt$V.GENE.and.allele %in% grep("TRB", imgt$V.GENE.and.allele, value = T), "TRB", "other"))

seqId = data.frame(strsplit2(imgt$Sequence.ID, split = "_"))
colnames(seqId) = c("libid", "junction")

vGene = imgt$V.GENE.and.allele
vGeneDf = data.frame(strsplit2(vGene, split = " "))

imgt.df = data.frame(imgt$Sequence.ID, seqId$libid, imgt$chainType, vGeneDf$X2, seqId$junction, group = "IAR", imgt$lenN)
colnames(imgt.df) = c("seqId", "libid", "chainType", "v_gene", "junction", "group", "lenN")

imgt.df$PITmatch = imgt.df$junction %in% levSub$aJunc1

imgtTra = subset(imgt.df, chainType == "TRA") # 1606
traMatchT = subset(imgtTra,PITmatch == "TRUE") # 16
traMatchF = subset(imgtTra,PITmatch == "FALSE") # 1590

toPlot = imgtTra

ks.test(traMatchT$lenN, traMatchF$lenN, simulate.p.value = T, B = 100000, alternative = "greater") #p-value = 1e-5

summary(traMatchT$lenN) # median = 3
summary(traMatchF$lenN) # median = 5

x = imgtTra
xnames = unique(x$v_gene)
ncx = length(xnames)

DF = data.frame(matrix(nrow= 0, ncol = 7))

for(i in 1:ncx){
q = xnames[i]
qsub = subset(x, v_gene == q)

tSub = subset(qsub, PITmatch == "TRUE")
fSub = subset(qsub, PITmatch == "FALSE")

t = nrow(traMatchT)
f = nrow(traMatchF)

forTestA = c(nrow(tSub), t - nrow(tSub))
forTestB = c(nrow(fSub), f - nrow(fSub))
c = rbind(forTestA, forTestB)

test = fisher.test(c)

result = c(q, nrow(tSub), t - nrow(tSub), nrow(fSub), f-nrow(fSub), test$p.value, test$estimate)

DF[i,] = result
}

colnames(DF) = c("v_gene", "noT", "totT", "noF", "totF", "pVal", "OR")
DF$fdr = p.adjust(DF$pVal, method = "BH")
DF$match = x$PITmatch[match(DF$v_gene, x$v_gene)]

DFup = subset(DF, fdr <0.05 & OR>1)
DFdn = subset(DF, fdr <0.05 & OR<1)

## intersect with long and short CDR1 V genes

v = data.frame(strsplit2(imgt$V.GENE.and.allele, split = " "))
imgt$v_gene = v$X2

imgtTra = subset(imgt, chainType == "TRA") # 1606

imgt15 = subset(imgtTra, nchar(imgtTra$CDR1.IMGT) == 15)
imgt18 = subset(imgtTra, nchar(imgtTra$CDR1.IMGT) == 18)
imgt21 = subset(imgtTra, nchar(imgtTra$CDR1.IMGT) == 21)

intersect(imgt15$v_gene, DFup$v_gene) # TRAV41*01
intersect(imgt18$v_gene, DFup$v_gene) # TRAV12-2*01
intersect(imgt21$v_gene, DFup$v_gene) # 0

intersect(imgt15$v_gene, DFdn$v_gene) # 0
intersect(imgt18$v_gene, DFdn$v_gene) # 0
intersect(imgt21$v_gene, DFdn$v_gene) # TRAV26-2*01, TRAV4*01

## plot v gene enrichment

if(dev.cur() >1) dev.off()

quartz(width=12,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))

theme_set(theme_bw(28) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

cbPalette = c('#66c2a5','#fc8d62', 'gray')

ggplot(DF, aes(x = v_gene, y = -log10(fdr), fill = match)) + geom_bar(stat="identity", width=1, position = "dodge")
last_plot() + geom_hline(yintercept = -log10(0.05), lty = "dotted")
last_plot() + theme(axis.text.x = element_blank()) 
#last_plot() + theme(axis.text.x=element_text(angle=90, hjust=1))
xlab = "\nTRA V gene segment "
ylab = "Enrichment, -log10(pAdj)\n"
last_plot() + labs(x = xlab, y = ylab)

p = last_plot()

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = paste0("FigS5_V_gene_enrichment_PITmatched-TRCs.pdf")
ggsave(filename, p)


















