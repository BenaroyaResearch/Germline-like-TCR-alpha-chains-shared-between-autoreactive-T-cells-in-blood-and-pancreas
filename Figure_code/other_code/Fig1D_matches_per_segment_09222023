rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures

## load TCRs

levIAR1 = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)

filename = ("Levenshtein_index_P324_P474_IAR_CD4_with_islet_TCRS_lv.lt6.csv")

levIAR2 = read.csv(filename, stringsAsFactors = F)

levSubIAR1 = subset(levIAR1, levIAR1$lv <2); nrow(levSubIAR1) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)
levSubIAR2 = subset(levIAR2, levIAR2$lv <2); nrow(levSubIAR2) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)

## load IAR1 TCRs

IAR1Tcrs = read.csv("201512_TCR_MasterList_w_CloneIDs.csv", stringsAsFactors = F) # 5729
colnames(IAR1Tcrs) = gsub("tcrGraph_sharing_level", "sharing_level", colnames(IAR1Tcrs))

IAR1Tcrs = data.frame(IAR1Tcrs, set = "IAR1")

colNames = c("libid", "v_gene", "j_gene", "junction", "project", "donor_id", "set", "study_group")

IAR1Tcrs = IAR1Tcrs[c(colNames)]
IAR1Tcrs$study_group = gsub("early onset T1D", "newT1D", IAR1Tcrs$study_group)

## create IAR1 hla

hla = read.xls("subject_char_w_HLA.xlsx", stringsAsFactors = F)

idKey = read.xls("P91_P168 Sample_ID_key.xlsx", stringsAsFactors = F)

IAR1Tcrs$supTabId = idKey$suppTabId[match(IAR1Tcrs$donor_id, idKey$tcrId)]
IAR1Tcrs$hla = hla$DRB1[match(IAR1Tcrs$supTabId, hla$Subject.ID)]

colNames1 = c("libid", "v_gene", "j_gene", "junction", "project", "donor_id", "set", "study_group", "hla")

IAR1Tcrs = IAR1Tcrs[c(colNames1)]

## load IAR2 TCRs

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data")

anno.filename = "P325_P474_comb_CD4+_anno_w_hla.txt"
tcrs.filename = "P325_P474_comb_CD4+_TCR_w_hla.txt"

test1 = read.delim(anno.filename, stringsAsFactors = F)
test2 = read.delim(tcrs.filename, stringsAsFactors = F)

test2$donor_id = test1$donorId[match(test2$libid, test1$libid)]
test2$study_group = test1$studyGroup2[match(test2$libid, test1$libid)]
test2$study_group = gsub("roT1D", "newT1D", test2$study_group)

test2 = subset(test2, !study_group == "estT1D")

IAR2Tcrs = data.frame(test2, set = "IAR2")
IAR2Tcrs$hla = test1$hla[match(IAR2Tcrs$donor_id, test1$donorId)]

colNames = c("libid", "v_gene", "j_gene", "junction", "project", "donor_id", "set", "study_group", "hla")

IAR2Tcrs = IAR2Tcrs[c(colNames)]

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_code")

## combine set 1 amd set2

tcrsComb = rbind(IAR1Tcrs, IAR2Tcrs) # 7727

tcrsComb$studyGroup = tcrsComb$study_group

tcrsComb$studyGroup = factor(tcrsComb$studyGroup, levels = c("HC", "AAbNeg", "1AAb", "2AAb",  "newT1D", "T1D" ))

## save tcrsComb as Supplemental Table for manuscript

toSave = tcrsComb
toSave$set = gsub("IAR1", "Cohort1", toSave$set)
toSave$set = gsub("IAR2", "Cohort2", toSave$set)
table(toSave$set )

#setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data")
#filename = "Table_S4_Compiled_and_filtered_TCR_sequences_used_in_this_study.csv"
#write.csv(toSave, filename)

## subset tcrsComb by HLA, if desired

#tcrsComb = subset(tcrsComb, tcrsComb$hla %in% grep("04", tcrsComb$hla, value = T)) # 3626 for "04"; 4101 for NOT 04

## determine expanded TCRs

no =  ddply(tcrsComb,.(junction), plyr::summarize, sum = length(libid)) # 6529 junctions, sum(no$sum) = 7727

cut <- 2
no.sub = subset(no, sum>=cut) # 474

E = subset(tcrsComb, junction %in% no.sub$junction) # 855 E junctions, 135 unique
libs = E$libid
E.cell = subset(tcrsComb, tcrsComb$libid %in% libs) # 956

E.cell$study_group = tcrsComb$study_group[match(E.cell$libid, tcrsComb$libid)] # 1954
	
frxn.e = length(unique(E.cell$libid))/length(unique(tcrsComb$libid)) # 24.4%
	
table(E.cell$studyGroup)

#HC AAbNeg   1AAb   2AAb newT1D    T1D 
# 284     23     56    101    812    678 # all tcrs, not subsetted
#   267      8     21     31    119    510 # hla  "04" subset
   
## add expanded cells to tcrsComb

tcrsComb$E = tcrsComb$libid %in% E.cell$libid # 1954 TRUE 5773 FALSE for junctions; 
tcrsComb$expanded = tcrsComb$E 
tcrsComb$expanded = gsub("TRUE", "E", tcrsComb$expanded)
tcrsComb$expanded = gsub("FALSE", "NE", tcrsComb$expanded)

tcrsComb$chainType = ifelse(tcrsComb$v_gene %in% grep("TRA", tcrsComb$v_gene, value = T), "TRA",
						ifelse(tcrsComb$v_gene %in% grep("TRB", tcrsComb$v_gene, value = T), "TRB","other"))

## remove iNKT and MAIT cell sequencces

iNkt1 = subset(tcrsComb, junction == "CVVSDRGSTLGRLYF")
iNkt2 = subset(tcrsComb, libid %in% iNkt1$libid)
mait1 = subset(tcrsComb, v_gene == "TRAV1-2" & (j_gene == "TRAJ33" | j_gene == "TRAJ20" | j_gene == "TRAJ12")) # 18
mait2 = subset(tcrsComb, libid %in% mait1$libid) # 45

tcrsCombSub3 = subset(tcrsComb, !junction %in% iNkt2$junction) # 
tcrsCombSub3 = subset(tcrsCombSub3, !junction %in% mait2$junction) # 7633

## modify combined TCRs

tcrsCombSub3$PITmatch = tcrsCombSub3$junction %in% levSubIAR1$aJunc1 | tcrsCombSub3$junction %in% levSubIAR2$aJunc1 # 1235 T, 6398 F
tcrsCombSub3$expanded = factor(tcrsCombSub3$expanded, levels = c("E", "NE")) # 

tcrsCombSub3Tra = subset(tcrsCombSub3, tcrsCombSub3$chainType == "TRA") # 1814
tcrsCombSub3Tra.u = tcrsCombSub3Tra[!duplicated(tcrsCombSub3Tra$junction),] # 1512

tcrsCombSub3.u = tcrsCombSub3[!duplicated(tcrsCombSub3$junction),] # 2967
tcrsTra = subset(tcrsCombSub3.u, chainType == "TRA") # 1512
tcrsTrb = subset(tcrsCombSub3.u, chainType == "TRB") # 1433

tcrsCombSub3Tra$studyGroup = gsub("AAbNeg", "HC", tcrsCombSub3Tra$studyGroup)

## select TCR subset to use

all = subset(tcrsCombSub3Tra, set == "IAR1") # 2725
all.u = all[!duplicated(all$junction),] # 2174

allSub = all.u

all$study_group = gsub("early onset T1D", "newT1D", all$study_group)

all.HC = subset(all, study_group == "HC") # 259
all.newT1D = subset(all, study_group == "newT1D") # 497
all.T1D = subset(all, study_group == "T1D") # 597

## load healthy (and COVID) repertoires and filter sequencces

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data")

su = read.csv("Su_et_al_filtered_TCRs.csv", stringsAsFactors = F) # 326782
su$X = NULL

suNkt1 = subset(su, junction == "CVVSDRGSTLGRLYF") #45
suNkt2 = subset(su, barcode %in% suNkt1$barcode) # 90
sumait1 = subset(su, v_gene == "TRAV1-2" & (j_gene == "TRAJ33" | j_gene == "TRAJ20" | j_gene == "TRAJ12")) # 2533
sumait2 = subset(su, barcode %in% sumait1$barcode) # 5106

su = subset(su, !junction %in% suNkt2$junction & !junction %in% sumait2$junction) # 320372

suTRA = subset(su, chainType == "TRA")
suTRB = subset(su, chainType == "TRB")

suCd4 = subset(su, su$cellType == "cd4")
suCd8 = subset(su, su$cellType == "cd8")

su.u = su[!duplicated(su$junction),]
suHc = subset(su.u, group == "HC")
suCovid = subset(su.u, group == "COVID")

## get pancreatic TCR seqs from Maki Nakayama, MAKI.NAKAYAMA@CUANSCHUTZ.EDU

mn = read.xls("220519_scPCR_Illumina.xlsx", stringsAsFactors = F)
mn$barcode = seq(1, nrow(mn), by = 1)
mn$alphaChain = paste(mn$Vgene, mn$Junction, mn$Jgene, sep = "_")
mn$betaChain = paste(mn$Vgene.2, mn$Junction.2, mn$Jgene.2, sep = "_")

comId = c("barcode", "Illumina", "Group", "Case_Tissue", "Subset", "Cell.ID" )
traId = c("Vgene", "Jgene", "Junction", "frame")
trbId = c("Vgene.2", "Jgene.2", "Junction.2", "frame.2")

mnA = mn[,c(comId, traId)]
mnB = mn[,c(comId, trbId)]

colnames(mnA) = c(comId, "v_gene", "j_gene", "junction", "frame")
colnames(mnB) = c(comId, "v_gene", "j_gene", "junction", "frame")

mnTcrs = rbind(mnA, mnB) # 18684
mnTcrs = subset(mnTcrs, frame == "in-frame") # 14049

length(unique(mnTcrs$junction)) # 9798  

mn.u = mn[!duplicated(mn$alphaChain),] # 5039

## load HLA for pancreatic TCR seqs

mnHla = read.xls("/Users/peterlinsley/Dropbox/RNAseq/Maki_Nakayama/HLA_Typing.xlsx", stringsAsFactors = F)

## bring patients IDs into harmony
mnHla$Sample.ID = gsub(" ", "", mnHla$Sample.ID)
mnHla$Sample.ID = gsub("IIDP", "iidp", mnHla$Sample.ID)
mn$Case_Tissue = gsub("_islets", "", mn$Case_Tissue)
mn$Case_Tissue = gsub("_Islets", "", mn$Case_Tissue)

mnTcrs$Case_Tissue = gsub("_islets", "", mnTcrs$Case_Tissue)
mnTcrs$Case_Tissue = gsub("_Islets", "", mnTcrs$Case_Tissue)

mnTcrs$drb1 = mnHla$DRB1[match(mnTcrs$Case_Tissue, mnHla$Sample.ID)]
mnTcrs$drb1.1 = mnHla$DRB1.1[match(mnTcrs$Case_Tissue, mnHla$Sample.ID)]

hla0401 = subset(mnTcrs, mnTcrs$drb1 %in% grep("04:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("04:01", mnTcrs$drb1.1, value = T))
hla0301 = subset(mnTcrs, mnTcrs$drb1 %in% grep("03:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("03:01", mnTcrs$drb1.1, value = T))
hla0404 = subset(mnTcrs, mnTcrs$drb1 %in% grep("04:04", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("04:04", mnTcrs$drb1.1, value = T))
hla0101 = subset(mnTcrs, mnTcrs$drb1 %in% grep("01:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("01:01", mnTcrs$drb1.1, value = T))

mnTcrs$hla = ifelse(mnTcrs$drb1 %in% grep("03:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("03:01", mnTcrs$drb1.1, value = T), "03:01", 
				ifelse(mnTcrs$drb1 %in% grep("07:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("07:01", mnTcrs$drb1.1, value = T),
"07:01", 				
					ifelse(mnTcrs$drb1 %in% grep("04:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("04:01", mnTcrs$drb1.1, value = T), "04:01",
						ifelse(mnTcrs$drb1 %in% grep("01:01", mnTcrs$drb1, value = T) | mnTcrs$drb1.1 %in% grep("01:01", mnTcrs$drb1.1, value = T), "01:01", "other"))))

mnTcrs.u = mnTcrs[!duplicated(mnTcrs$junction),] # 9798 
						
mn$hla = mnTcrs$hla[match(mn$Case_Tissue, mnTcrs$Case_Tissue)]

## overlap of unique junctions

var1 = mnTcrs.u$junction %in% intersect(mnTcrs$junction, all.u$junction)

var1 = all.u$junction %in% intersect(mnTcrs$junction, all.u$junction)
table(var1)

#FALSE  TRUE 
# 2119    55 

##########################
## Fig1D. check matches throughout TRA segment, all HLA

toCalc = levSubIAR1

toCalc$vGene1 = all.u$v_gene[match(toCalc$aJunc1, all.u$junction)]
toCalc$junction1 = all.u$junction[match(toCalc$aJunc1, all.u$junction)]
toCalc$jGene1 = all.u$j_gene[match(toCalc$aJunc1, all.u$junction)]

toCalc$vGene2 = mn.u$Vgene[match(toCalc$aJunc2, mn.u$Junction)]
toCalc$junction2 = mn.u$Junction[match(toCalc$aJunc2, mn.u$Junction)]
toCalc$jGene2 = mn.u$Jgene[match(toCalc$aJunc2, mn.u$Junction)]

toCalc$vGene2 = gsub("\\/","", toCalc$vGene2)

toCalc$hla  = mnTcrs.u$hla[match(toCalc$aJunc2, mnTcrs.u$junction)]

toCalc$vMatch = ifelse(toCalc$vGene1 == toCalc$vGene2, "TRUE", "FALSE")
toCalc$juncMatch = ifelse(stringdist(toCalc$junction1,toCalc$junction2)<2, "TRUE", "FALSE")
toCalc$jMatch = ifelse(toCalc$jGene1 == toCalc$jGene2, "TRUE", "FALSE")

toCalc$vMatch = factor(toCalc$vMatch, levels = c("FALSE", "TRUE"))
toCalc$juncMatch = factor(toCalc$juncMatch, levels = c("FALSE", "TRUE"))
toCalc$jMatch = factor(toCalc$jMatch, levels = c("FALSE", "TRUE"))

#############################
### facet by segment matches by numbers of IAR mismatches 

dfV = data.frame(table(toCalc$vMatch, toCalc$lv)) # sum(dfV$Freq) = 1389 or nrow levIAR1
dfV$segment = c("Vgene")
dfJunc = data.frame(table(toCalc$juncMatch, toCalc$lv))
dfJunc$segment = c("Junction")
dfJ = data.frame(table(toCalc$jMatch, toCalc$lv))
dfJ$segment = c("Jgene")

## toCalc$lv, toCalc$hla

toPlot = rbind(dfV, dfJunc, dfJ)
colnames(toPlot) = c("segMatch",  "mismatches", "count", "Segment")

toPlot$mismatches = gsub("0", "0 mismatches", toPlot$mismatches)
toPlot$mismatches = gsub("1", "1 mismatch", toPlot$mismatches)

tot = data.frame(table(toCalc$juncMatc, toCalc$lv))
mTot = melt(tot)
colnames(mTot) = c("segMatch", "mismatches", "variable", "value")
mTot = subset(mTot, segMatch == "TRUE")
mTot$mismatches = gsub("0", "0 mismatches", mTot$mismatches)
mTot$mismatches = gsub("1", "1 mismatch", mTot$mismatches)

toPlot = subset(toPlot, segMatch == "TRUE")
toPlot$tot = mTot$value[match(toPlot$mismatches, mTot$mismatches)]
toPlot$freq = toPlot$count/toPlot$tot

if(dev.cur() >1) dev.off()

quartz(width=15,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))

theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

cbPalette = c('#66c2a5','#fc8d62', 'gray')

ggplot(toPlot, aes(x = Segment, y = freq)) + geom_col(fill = "blue")
last_plot() + facet_grid(~mismatches)
last_plot() + scale_y_continuous(breaks = c(0, 0.5, 1.0))

xlab = "TRA segment\n"
ylab = paste("\nFracton matches,\n IAR versus PIT")
last_plot() + labs(x = xlab, y = ylab)
last_plot() + coord_flip()

p = last_plot()

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs")

filename = paste0("Fig1D_", "TRA_segment_by mismatches", ".pdf") 
#ggsave(filename, p)

## count numbers of TCRs tested for HLA

table(is.na(toCalc$hla))

#FALSE  TRUE 
# 1378    11 

v = subset(toPlot, Segment == "Vgene")
v
#segMatch   mismatches count Segment  tot      freq
#2     TRUE 0 mismatches    12   Vgene   47 0.2553191
#4     TRUE   1 mismatch   220   Vgene 1342 0.1639344

