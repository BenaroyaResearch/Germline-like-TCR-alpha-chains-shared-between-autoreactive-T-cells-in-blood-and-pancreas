rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)
library(scales)
library(Peptides)

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures

## load TCRs

## load PIT matched TCRs

levIAR1 = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)
levIAR1$index = NULL
levIAR1$set = c("IAR1")

filename = ("Levenshtein_index_P324_P474_IAR_CD4_with_islet_TCRS_lv.lt6.csv")

levIAR2 = read.csv(filename, stringsAsFactors = F)
levIAR2$index1 = NULL
levIAR2$index2 = NULL
levIAR2$set = NULL
levIAR2$set = c("IAR2")

levSubIAR1 = subset(levIAR1, levIAR1$lv <2); nrow(levSubIAR1) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)
levSubIAR2 = subset(levIAR2, levIAR2$lv <2); nrow(levSubIAR2) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)

levSub = rbind(levSubIAR1, levSubIAR2) # 2732

#levSub = subset(levSub, set == "IAR1") # for troubleshooting. 1389. 
###########################
## compile IMGT parameters

## compare segment sequence features for PIT matching and non-matching TRA chains

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures

imgt1 = read.delim("P91_3_Nt-sequences.txt", stringsAsFactors = F)
imgt1$set = c('IAR1')
seqId1 = data.frame(strsplit2(imgt1$Sequence.ID, split = "_"))
colnames(seqId1) = c("libid", "junction")
imgt1 = cbind(seqId1, imgt1)

imgt2 = read.delim("P325_P474_3_Nt-sequences.txt", stringsAsFactors = F)
imgt2$set = c('IAR2')

## add junction and libid to imgt2

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
imgt2Tcrs = read.delim("P325_P474_CD4_unique_TCRs.txt", stringsAsFactors = F)
seqId2 = data.frame(imgt2Tcrs$libid, imgt2Tcrs$junction)
colnames(seqId2) = c("libid", "junction")
imgt2 = cbind(seqId2, imgt2)

imgt1AA =  read.delim("P91_5_AA-sequences.txt", stringsAsFactors = F)
imgt1AA$set = c('IAR1')
imgt2AA =  read.delim("P325_P474_5_AA-sequences.txt", stringsAsFactors = F)
imgt2AA$set = c('IAR2')
imgt2AA$X = NULL

imgt = rbind(imgt1, imgt2)
imgtAA = rbind(imgt1AA, imgt2AA)

## check on id order

all(imgt$Sequence.number == imgtAA$Sequence.number)
#[1] TRUE
all(imgt$Sequence.ID == imgtAA$ID)
#[1] TRUE

table(imgt$set)
table(imgtAA$set)

## both give
#IAR1 IAR2 
#3168 3217 

## add protein sequence to imgt

imgt$junction = imgtAA$JUNCTION[match(imgt$Sequence.number, imgtAA$Sequence.number)]
imgt$PITmatch = imgt$junction %in% levSub$aJunc1

imgt$chainType = ifelse(imgt$V.GENE.and.allele %in% grep("TRA", imgt$V.GENE.and.allele, value = T), "TRA", 
					ifelse(imgt$V.GENE.and.allele %in% grep("TRB", imgt$V.GENE.and.allele, value = T), "TRB", "other"))

imgt = subset(imgt, !chainType == "other") #3226 T, 3141 F

#imgt = subset(imgt, set == "IAR2") # for troubleshooting

imgt = subset(imgt, !(set == "IAR2" & chainType == "TRB" & PITmatch == "TRUE")) # these shouldn't be here. remove from analysis
      
## calculate lengths

imgt$lenN = nchar(imgt$N.REGION) + nchar(imgt$N1.REGION)
imgt$juncLen = nchar(imgt$JUNCTION) 
imgt$threeVRegion = nchar(imgt$X3.V.REGION) 
imgt$fiveJRegion = nchar(imgt$X5.J.REGION) 
imgt$JRegion = nchar(imgt$J.REGION) 
imgt$cdr1 = nchar(imgt$CDR1.IMGT)
imgt$cdr2 = nchar(imgt$CDR2.IMGT)
imgt$cdr3 = nchar(imgt$CDR3.IMGT)
imgt$fr1 = nchar(imgt$FR1.IMGT)
imgt$fr2 = nchar(imgt$FR2.IMGT)
imgt$fr3 = nchar(imgt$FR3.IMGT)
imgt$fr4 = nchar(imgt$FR4.IMGT)

imgt$hydro = hydrophobicity( imgt$junction, scale = "Eisenberg")

imgtTra = subset(imgt, chainType == "TRA") # 3226
imgtTrb = subset(imgt, chainType == "TRB") # 2863

table(imgt$PITmatch, imgt$chainType)

# IAR1 only
#table(imgt$PITmatch, imgt$chainType)
       
#         TRA  TRB
#  FALSE 1033 1562
#  TRUE   573    0
  
# IAR2 only

#table(imgt$PITmatch, imgt$chainType)
       
#         TRA  TRB
#  FALSE 1330 1301
#  TRUE   290  278
  
  
# both
 
#table(imgt$PITmatch, imgt$chainType)
       
#         TRA  TRB
#  FALSE 2356 2863
#  TRUE   870  278

# after removal of erroneous TRB chains

table(imgt$PITmatch, imgt$chainType)
       
#         TRA  TRB
#  FALSE 2356 2863
#  TRUE   870    0

## identify TRB chains that pair with PITmatched TRA chains & add PIT matching status for TRA chains.

traMatchT = subset(imgtTra,PITmatch == "TRUE") # 870
traMatchF = subset(imgtTra,PITmatch == "FALSE") # 2356

trbMatchT = subset(imgtTrb,PITmatch == "TRUE") # 0
imgtTrb$PITmatch = ifelse(imgtTrb$libid %in% traMatchT$libid, "TRUE", "FALSE") # 739 TRUE, 2124 FALSE

trbMatchT = subset(imgtTrb,PITmatch == "TRUE") # 739
trbMatchF = subset(imgtTrb,PITmatch == "FALSE") # 2124

## summarize junction length and hydrophobicity

summary(traMatchT$juncLen) # 39 median 
summary(traMatchF$juncLen) # 42 median

summary(traMatchT$hydro) # 0.2321
summary(traMatchF$hydro) # 0.15875

summary(trbMatchT$juncLen) # 42
summary(trbMatchF$juncLen) # 42

summary(trbMatchT$hydro) # 0.09833
summary(trbMatchF$hydro) # 0.12067

## KS tests
test1 = ks.test(traMatchT$juncLen, traMatchF$juncLen, alternative = "two.sided"); test1 #p-value = 4.859e-10 for junction TRA; 
test2 = ks.test(traMatchT$hydro, traMatchF$hydro, alternative = "two.sided"); test2 #p-value = < 2.2e-16 for hydro TRA;
test3 = ks.test(trbMatchT$juncLen, trbMatchF$juncLen, alternative = "two.sided"); test3 #p-value = 0.9994 for junction TRB; 
test4 = ks.test(trbMatchT$hydro, trbMatchF$hydro, alternative = "two.sided"); test4 #p-value = .0399 for hydro TRB; 

## use **** adjusted p-values for both TRA juncLen and hydro; NS for both TRB juncLen and hydro

###################### 
## for TRA junctions

toPlotName = c("imgtTra")
toPlot = get(toPlotName) # select TRA or TRB chains
toPlot$PITmatch = gsub("TRUE", "PIT-matched", toPlot$PITmatch)
toPlot$PITmatch = gsub("FALSE", "non-PIT-matched", toPlot$PITmatch)


## Junction length

if(dev.cur()>1) dev.off()
quartz(width=13,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))

theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

cbPalette = c('#66c2a5','#fc8d62', 'gray')

ggplot(toPlot, aes(x = juncLen)) + geom_density(aes(fill = PITmatch), alpha = 0.5, adjust = 1)
#last_plot() + theme(legend.spacing.y = unit(0.5, 'cm')) + guides(fill = guide_legend(byrow = TRUE))

xlab = "\nJunc length (nt)"
ylab = "Density\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + geom_vline(xintercept = median(traMatchT$juncLen), lty = "solid")
last_plot() + geom_vline(xintercept = median(traMatchF$juncLen), lty = "dashed")
last_plot() + scale_fill_manual(values=cbPalette)

p = last_plot()

forLab = ggplot_build(p)

Y = 0.9*(max(forLab$data[[1]]$density))
X = 1*(min((forLab$data[[1]]$x)))

label = paste("KS test, \np-value =", scientific(test1$p.value, 2), sep = " ")
#last_plot() + annotate("text", X, Y, label = label, size = 8, hjust = 0)

p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = paste0("Fig2A_", toPlotName, "_junction_length_by_PITmatch.pdf") #TRA

ggsave(filename, p)

## Hydrophobicity

if(dev.cur()>1) dev.off()
quartz(width=13,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))

theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

cbPalette = c('#66c2a5','#fc8d62', 'gray')

ggplot(toPlot, aes(x = hydro)) + geom_density(aes(fill = PITmatch), alpha = 0.5, adjust = 1)

xlab = "\nHydrophobicity"
ylab = "Density\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + geom_vline(xintercept = median(traMatchT$hydro), lty = "solid")
last_plot() + geom_vline(xintercept = median(traMatchF$hydro), lty = "dashed")
last_plot() + scale_fill_manual(values=cbPalette)

p = last_plot()

forLab = ggplot_build(p)

Y = 0.9*(max(forLab$data[[1]]$density))
X = 1*(min((forLab$data[[1]]$x)))

label = paste("KS test, \np-value =", scientific(test2$p.value, 2), sep = " ")
#last_plot() + annotate("text", X, Y, label = label, size = 8, hjust = 0)

p = last_plot()

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = paste0("Fig2C_", toPlotName, "_hydrophobicity_by_PITmatch.pdf") #TRA

ggsave(filename, p)

 ######################
 ## plots for TRB junctions

 toPlotName = c("imgtTrb")
 toPlot = get(toPlotName) # select TRA or TRB chains
 toPlot$PITmatch = gsub("TRUE", "PIT-matched", toPlot$PITmatch)
 toPlot$PITmatch = gsub("FALSE", "non-PIT-matched", toPlot$PITmatch)

 ## Junction length

 if(dev.cur()>1) dev.off()
 quartz(width=13,height=8, dpi=72)  ### open plotting window
 update_geom_defaults("line", aes(size = 2))
 update_geom_defaults("point", aes(size = 2))

 theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

 cbPalette = c('#66c2a5','#fc8d62', 'gray')

 ggplot(toPlot, aes(x = juncLen)) + geom_density(aes(fill = PITmatch), alpha = 0.5, adjust = 1)
 #last_plot() + theme(legend.spacing.y = unit(0.5, 'cm')) + guides(fill = guide_legend(byrow = TRUE))

 xlab = "\nJunc length (nt)"
 ylab = "Density\n"
 last_plot() + labs(x = xlab, y = ylab)
 last_plot() + geom_vline(xintercept = median(trbMatchT$juncLen), lty = "solid")
 last_plot() + geom_vline(xintercept = median(trbMatchF$juncLen), lty = "dashed")
 last_plot() + scale_fill_manual(values=cbPalette)

 p = last_plot()

 forLab = ggplot_build(p)

 Y = 0.9*(max(forLab$data[[1]]$density))
 X = 1*(min((forLab$data[[1]]$x)))

 label = paste("KS test, \np-value =", scientific(test1$p.value, 2), sep = " ")
 #last_plot() + annotate("text", X, Y, label = label, size = 8, hjust = 0)

 p = last_plot()
 setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
 filename = paste0("Fig2B_", toPlotName, "_junction_length_by_PITmatch.pdf") #TRA

 ggsave(filename, p)

 ## Hydrophobicity

 if(dev.cur()>1) dev.off()
 quartz(width=13,height=8, dpi=72)  ### open plotting window
 update_geom_defaults("line", aes(size = 2))
 update_geom_defaults("point", aes(size = 2))

 theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

 cbPalette = c('#66c2a5','#fc8d62', 'gray')

 ggplot(toPlot, aes(x = hydro)) + geom_density(aes(fill = PITmatch), alpha = 0.5, adjust = 1)

 xlab = "\nHydrophobicity"
 ylab = "Density\n"
 last_plot() + labs(x = xlab, y = ylab)
 last_plot() + geom_vline(xintercept = median(trbMatchT$hydro), lty = "solid")
 last_plot() + geom_vline(xintercept = median(trbMatchF$hydro), lty = "dashed")
 last_plot() + scale_fill_manual(values=cbPalette)

 p = last_plot()

 forLab = ggplot_build(p)

 Y = 0.9*(max(forLab$data[[1]]$density))
 X = 1*(min((forLab$data[[1]]$x)))

 label = paste("KS test, \np-value =", scientific(test2$p.value, 2), sep = " ")
 #last_plot() + annotate("text", X, Y, label = label, size = 8, hjust = 0)

 p = last_plot()

 setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
 filename = paste0("Fig2D_", toPlotName, "_hydrophobicity_by_PITmatch.pdf") #TRA

 ggsave(filename, p)






