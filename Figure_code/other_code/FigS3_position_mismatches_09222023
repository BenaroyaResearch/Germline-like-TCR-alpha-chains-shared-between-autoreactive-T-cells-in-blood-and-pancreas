rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)
library(scales)

setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures

## load TCRs

levIAR1 = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)

lev = levIAR1

levSub = subset(lev, lv <2); nrow(levSub) # 1389

toCalc = subset(levSub, lv ==1)
toCalc$len1 = nchar(toCalc$aJunc1)
toCalc$len2 = nchar(toCalc$aJunc2)

toPlotName = c("Levenshtein_1")

## identify region of mismatch between single mismatched IAR TRA and PIT chains.. Use randomized subset for comparison
res1 <- mapply(function(x,y) first(which(bitwXor(utf8ToInt(x),utf8ToInt(y))>0)), toCalc$aJunc1, toCalc$aJunc2, USE.NAMES = FALSE) # 
res2 <- mapply(function(x,y) first(which(bitwXor(utf8ToInt(x),utf8ToInt(y))>0)), sample(lev$aJunc1, size = length(toCalc$aJunc1)), toCalc$aJunc2, USE.NAMES = FALSE) # random 

toCalc$res1 = as.numeric(res1)
toCalc$res2 = as.numeric(res2)

toCalc$res1Norm = toCalc$res1/toCalc$len1
toCalc$res2Norm = toCalc$res2/toCalc$len1

###########################
## Compare IMGT parameters

toPlot = data.frame(aJunc1 = toCalc$aJunc1, aJunc2 = toCalc$aJunc1, observed = toCalc$res1, random = toCalc$res2)
mToPlot = melt(toPlot)
#mToPlot = subset(mToPlot, variable == "random")
colnames(mToPlot) = gsub("variable", "Mismatch", colnames(mToPlot))

imgt = read.delim("3_Nt-sequences.txt", stringsAsFactors = F)

imgt$lenN = nchar(imgt$N.REGION) + nchar(imgt$N1.REGION)
imgt$lenJunc = nchar(imgt$JUNCTION) 
imgt$threeVRegion = nchar(imgt$X3.V.REGION) 
imgt$fiveJRegion = nchar(imgt$X5.J.REGION) 
imgt$JRegion = nchar(imgt$J.REGION) 
imgt$cdr1 = nchar(imgt$CDR1.IMGT)
imgt$cdr2 = nchar(imgt$CDR2.IMGT)
imgt$cdr3 = nchar(imgt$CDR3.IMGT)
imgt$fr1 = nchar(imgt$FR1.IMGT)
imgt$fr2 = nchar(imgt$FR2.IMGT)
imgt$fr3 = nchar(imgt$FR3.IMGT)
imgt$fr4 = nchar(imgt$FR4.IMGT)

imgt$chainType = ifelse(imgt$V.GENE.and.allele %in% grep("TRA", imgt$V.GENE.and.allele, value = T), "TRA", 
					ifelse(imgt$V.GENE.and.allele %in% grep("TRB", imgt$V.GENE.and.allele, value = T), "TRB", "other"))

seqId = data.frame(strsplit2(imgt$Sequence.ID, split = "_"))
colnames(seqId) = c("libid", "junction")
imgt$junction = seqId$junction

toPlot$vEnd = imgt$V.REGION.end[match(toPlot$aJunc1, imgt$junction)]
toPlot$jStart = imgt$J.REGION.start[match(toPlot$aJunc1, imgt$junction)]
toPlot$juncStart = imgt$JUNCTION.start[match(toPlot$aJunc1, imgt$junction)]
toPlot$juncEnd = imgt$JUNCTION.end[match(toPlot$aJunc1, imgt$junction)]
toPlot$juncStartAA = ((toPlot$juncStart-toPlot$juncStart)/3 + 1)
toPlot$vEndAA = floor((toPlot$vEnd-toPlot$juncStart)/3 + 1)
toPlot$jStartAA = ceiling((toPlot$jStart-toPlot$juncStart)/3 + 1)

toPlotSub = data.frame(aJunc1 = toPlot$aJunc1, aJunc2 = toPlot$aJunc1, mismatch = toPlot$observed, vEnd = toPlot$vEndAA, jStart = toPlot$jStartAA)
#toPlotSub = data.frame(aJunc1 = toPlot$aJunc1, aJunc2 = toPlot$aJunc1, mismatch = toPlot$random, vEnd = toPlot$vEndAA, jStart = toPlot$jStartAA) # use random subset 

mToPlotSub = melt(toPlotSub)
mToPlotSub$variable = gsub("observed", "mismatch", mToPlotSub$variable)
mToPlotSub$variable = factor(mToPlotSub$variable, levels = c("mismatch", "vEnd", "jStart"))

if(dev.cur()>1) dev.off()

quartz(width=16,height=9, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 0.5))
update_geom_defaults("point", aes(size = 2))

theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

cbPalette = c('#1b9e77','#d95f02', '#7570b3')

ggplot(mToPlotSub, aes(x = value)) + geom_density(aes(fill = variable), alpha = 0.5)
last_plot() + scale_x_continuous(limits = c(0, 8), breaks = seq(from = 0, to = 8, by = 1))
last_plot() + scale_fill_manual(values=cbPalette)
xlab = "\nPosition (AA)"
ylab = "Density\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + facet_wrap(~variable)
last_plot() + geom_vline(xintercept = median(toPlot$observed))

p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = paste0("FigS3_", toPlotName, "_mismatch_junction_positions.pdf") #

ggsave(filename, p)

#####################

