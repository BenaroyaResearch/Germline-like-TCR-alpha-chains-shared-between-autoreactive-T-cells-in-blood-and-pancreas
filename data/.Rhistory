abline(a,b)
confint(r.x)
#                   2.5 %       97.5 %
#(Intercept) -10963.855103 30609.193089
#sum.y            1.063895     1.139319
# thus, confidence interval for slope does NOT contain 1. Significant.
## calculate fraction of PIT matches
levComb = unique(c(levSubIAR1$aJunc1, levSubIAR2$aJunc1)) # 1106
tcrsCombSub3.u = tcrsCombSub3[!duplicated(tcrsCombSub3$junction),] # 6481
tcrsTra = subset(tcrsCombSub3.u, chainType == "TRA") # 3264
tcrsTrb = subset(tcrsCombSub3.u, chainType == "TRB") # 3187
fracLevTra = 1106/3264 = 33.9%
View(mn.u)
View(mnTcrs)
mn.u = mn[!duplicated(mn$alphaChain),] # 5039
mn.uTra = subset(mn.u, chainType == "TRA")
View(mn.u)
View(mnTcrs.u)
mnTcrs = rbind(mnA, mnB) # 18684
mnTcrs = subset(mnTcrs, frame == "in-frame") # 14049
length(unique(mnTcrs$junction)) # 9798
mnTcrsTra = subset(mnTcrs, chainType == "TRA")
View(no)
View(mnTcrs)
mnTcrs$chainType = ifelse(mnTcrs$v_gene %in% grep("TRA", mnTcrs$chainType, value = T), "TRA",
ifelse(mnTcrs$v_gene %in% grep("TRB", mnTcrs$chainType, value = T), "TRB","other")
)
mnTcrs.u = mnTcrs[!duplicated(mnTcrs$junction),]
mnTcrs$chainType = ifelse(mnTcrs$v_gene %in% grep("TRA", mnTcrs$v_gene, value = T), "TRA",
ifelse(mnTcrs$v_gene %in% grep("TRB", mnTcrs$v_gene, value = T), "TRB","other"))
mnTra.u = subset(mnTcrs.u, ,chainType == "TRA")
mnTcrs.u = mnTcrs[!duplicated(mnTcrs$junction),] # 9798
mnTra.u = subset(mnTcrs.u, chainType == "TRA")
mnTra.u = subset(mnTcrs.u, chainType == "TRA")	# 4614
mnTrb.u = subset(mnTcrs.u, chainType == "TRB")	# 4614
table(mnTcrs$chainType)
levComb = unique(c(levSubIAR1$aJunc2, levSubIAR2$aJunc2)) # 1309
fracLevTra = 1309/4614 = 33.9%
fracLevTra = 1309/4614 # 33.9%
rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)
library(scales)
library(Peptides)
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
## load TCRs
## load PIT matched TCRs
levIAR1 = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)
levIAR1$index = NULL
levIAR1$set = c("IAR1")
filename = ("Levenshtein_index_P324_P474_IAR_CD4_with_islet_TCRS_lv.lt6.csv")
levIAR2 = read.csv(filename, stringsAsFactors = F)
levIAR2$index1 = NULL
levIAR2$index2 = NULL
levIAR2$set = NULL
levIAR2$set = c("IAR2")
levSubIAR1 = subset(levIAR1, levIAR1$lv <2); nrow(levSubIAR1) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)
levSubIAR2 = subset(levIAR2, levIAR2$lv <2); nrow(levSubIAR2) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)
levSub = rbind(levSubIAR1, levSubIAR2) # 2732
#levSub = subset(levSub, set == "IAR1") # for troubleshooting. 1389.
###########################
## compile IMGT parameters
## compare segment sequence features for PIT matching and non-matching TRA chains
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
imgt1 = read.delim("P91_3_Nt-sequences.txt", stringsAsFactors = F)
imgt1$set = c('IAR1')
seqId1 = data.frame(strsplit2(imgt1$Sequence.ID, split = "_"))
colnames(seqId1) = c("libid", "junction")
imgt1 = cbind(seqId1, imgt1)
imgt2 = read.delim("P325_P474_3_Nt-sequences.txt", stringsAsFactors = F)
imgt2$set = c('IAR2')
## add junction and libid to imgt2
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
imgt2Tcrs = read.delim("P325_P474_CD4_unique_TCRs.txt", stringsAsFactors = F)
seqId2 = data.frame(imgt2Tcrs$libid, imgt2Tcrs$junction)
colnames(seqId2) = c("libid", "junction")
imgt2 = cbind(seqId2, imgt2)
imgt1AA =  read.delim("P91_5_AA-sequences.txt", stringsAsFactors = F)
imgt1AA$set = c('IAR1')
imgt2AA =  read.delim("P325_P474_5_AA-sequences.txt", stringsAsFactors = F)
imgt2AA$set = c('IAR2')
imgt2AA$X = NULL
imgt = rbind(imgt1, imgt2)
imgtAA = rbind(imgt1AA, imgt2AA)
## check on id order
all(imgt$Sequence.number == imgtAA$Sequence.number)
#[1] TRUE
all(imgt$Sequence.ID == imgtAA$ID)
#[1] TRUE
table(imgt$set)
table(imgtAA$set)
## both give
#IAR1 IAR2
#3168 3217
## add protein sequence to imgt
imgt$junction = imgtAA$JUNCTION[match(imgt$Sequence.number, imgtAA$Sequence.number)]
imgt$PITmatch = imgt$junction %in% levSub$aJunc1
imgt$chainType = ifelse(imgt$V.GENE.and.allele %in% grep("TRA", imgt$V.GENE.and.allele, value = T), "TRA",
ifelse(imgt$V.GENE.and.allele %in% grep("TRB", imgt$V.GENE.and.allele, value = T), "TRB", "other"))
imgt = subset(imgt, !chainType == "other") #3226 T, 3141 F
#imgt = subset(imgt, set == "IAR2") # for troubleshooting
imgt = subset(imgt, !(set == "IAR2" & chainType == "TRB" & PITmatch == "TRUE")) # these shouldn't be here. remove from analysis
## calculate lengths
imgt$NRegion = nchar(imgt$N.REGION) + nchar(imgt$N1.REGION)
imgt$juncLen = nchar(imgt$JUNCTION)
imgt$threeVRegion = nchar(imgt$X3.V.REGION)
imgt$fiveJRegion = nchar(imgt$X5.J.REGION)
imgt$JRegion = nchar(imgt$J.REGION)
imgt$cdr1 = nchar(imgt$CDR1.IMGT)
imgt$cdr2 = nchar(imgt$CDR2.IMGT)
imgt$cdr3 = nchar(imgt$CDR3.IMGT)
imgt$fr1 = nchar(imgt$FR1.IMGT)
imgt$fr2 = nchar(imgt$FR2.IMGT)
imgt$fr3 = nchar(imgt$FR3.IMGT)
imgt$fr4 = nchar(imgt$FR4.IMGT)
imgt$chainType = ifelse(imgt$V.GENE.and.allele %in% grep("TRA", imgt$V.GENE.and.allele, value = T), "TRA",
ifelse(imgt$V.GENE.and.allele %in% grep("TRB", imgt$V.GENE.and.allele, value = T), "TRB", "other"))
imgt$hydro = hydrophobicity( imgt$junction, scale = "Eisenberg")
imgtTra = subset(imgt, chainType == "TRA") # 3226
imgtTrb = subset(imgt, chainType == "TRB") # 2863
table(imgt$PITmatch, imgt$chainType)
# IAR1 only
#table(imgt$PITmatch, imgt$chainType)
#         TRA  TRB
#  FALSE 1033 1562
#  TRUE   573    0
# IAR2 only
#table(imgt$PITmatch, imgt$chainType)
#         TRA  TRB
#  FALSE 1330 1301
#  TRUE   290  278
# both
#table(imgt$PITmatch, imgt$chainType)
#         TRA  TRB
#  FALSE 2356 2863
#  TRUE   870  278
# after removal of erroneous TRB chains
table(imgt$PITmatch, imgt$chainType)
#         TRA  TRB
#  FALSE 2356 2863
#  TRUE   870    0
## identify TRB chains that pair with PITmatched TRA chains & add PIT matching status for TRA chains.
traMatchT = subset(imgtTra,PITmatch == "TRUE") # 870
traMatchF = subset(imgtTra,PITmatch == "FALSE") # 2356
trbMatchT = subset(imgtTrb,PITmatch == "TRUE") # 0
imgtTrb$PITmatch = ifelse(imgtTrb$libid %in% traMatchT$libid, "TRUE", "FALSE") # 739 TRUE, 2124 FALSE
trbMatchT = subset(imgtTrb,PITmatch == "TRUE") # 739
trbMatchF = subset(imgtTrb,PITmatch == "FALSE") # 2124
toPlot = imgtTra
ks.test(traMatchT$NRegion, traMatchF$NRegion, simulate.p.value = T, B = 100000, alternative = "greater") #p-value = 1e-5
summary(traMatchT$NRegion) # median = 3
summary(traMatchF$NRegion) # median = 4
x = imgtTra
colnames(x) = gsub("V.GENE.and.allele", "v_gene", colnames(x))
xnames = unique(x$v_gene)
ncx = length(xnames)
DF = data.frame(matrix(nrow= 0, ncol = 7))
for(i in 1:ncx){
q = xnames[i]
qsub = subset(x, v_gene == q)
tSub = subset(qsub, PITmatch == "TRUE")
fSub = subset(qsub, PITmatch == "FALSE")
t = nrow(traMatchT)
f = nrow(traMatchF)
forTestA = c(nrow(tSub), t - nrow(tSub))
forTestB = c(nrow(fSub), f - nrow(fSub))
c = rbind(forTestA, forTestB)
test = fisher.test(c)
result = c(q, nrow(tSub), t - nrow(tSub), nrow(fSub), f-nrow(fSub), test$p.value, test$estimate)
DF[i,] = result
}
colnames(DF) = c("v_gene", "noT", "totT", "noF", "totF", "pVal", "OR")
DF$pVal = as.numeric(DF$pVal)
DF$fdr = p.adjust(DF$pVal, method = "BH")
DF$PITmatch = x$PITmatch[match(DF$v_gene, x$v_gene)]
DF$PITmatch = gsub("TRUE", "PIT-matched", DF$PITmatch)
DF$PITmatch = gsub("FALSE", "non-PIT-matched", DF$PITmatch)
DFup = subset(DF, fdr <0.05 & OR>1)
DFdn = subset(DF, fdr <0.05 & OR<1)
## intersect with long and short CDR1 V genes
v = data.frame(strsplit2(imgt$V.GENE.and.allele, split = " "))
imgt$v_gene = v$X2
imgtTra = subset(imgt, chainType == "TRA") # 1606
imgt15 = subset(imgtTra, nchar(imgtTra$CDR1.IMGT) == 15)
imgt18 = subset(imgtTra, nchar(imgtTra$CDR1.IMGT) == 18)
imgt21 = subset(imgtTra, nchar(imgtTra$CDR1.IMGT) == 21)
intersect(imgt15$v_gene, DFup$v_gene) # TRAV41*01
intersect(imgt18$v_gene, DFup$v_gene) # TRAV12-2*01
intersect(imgt21$v_gene, DFup$v_gene) # 0
intersect(imgt15$v_gene, DFdn$v_gene) # 0
intersect(imgt18$v_gene, DFdn$v_gene) # 0
intersect(imgt21$v_gene, DFdn$v_gene) # TRAV26-2*01, TRAV4*01
## plot v gene enrichment
if(dev.cur() >1) dev.off()
quartz(width=13,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(DF, aes(x = v_gene, y = -log10(fdr), fill = PITmatch)) + geom_bar(stat="identity", width=1, position = "dodge")
last_plot() + geom_hline(yintercept = -log10(0.05), lty = "dotted")
last_plot() + theme(axis.text.x = element_blank())
#last_plot() + theme(axis.text.x=element_text(angle=90, hjust=1))
xlab = "\nTRA V gene segment "
ylab = "Enrichment, -log10(pAdj)\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + scale_fill_manual(values=cbPalette)
p = last_plot()
forLab = ggplot_build(p)
Y = 0.95*(max(max(-log10(p$data$fdr))))
X =30
label = c("TRAV41*01")
last_plot() + annotate("text", X, Y, label = label, size = 8, hjust = 0)
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = paste0("FigS9_V_gene_enrichment_PITmatched-TRCs.pdf")
ggsave(filename, p)
rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)
library(scales)
library(Peptides)
library(readxl)
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
## load TCRs with pgen scores
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
pgen = read.csv("Table_S4_Compiled_and_filtered_TCR_sequencces_used_in_this_study.csv")
## load PIT matched TCRs
levIAR1 = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)
filename = ("Levenshtein_index_P324_P474_IAR_CD4_with_islet_TCRS_lv.lt6.csv")
levIAR2 = read.csv(filename, stringsAsFactors = F)
levSubIAR1 = subset(levIAR1, levIAR1$lv <2); nrow(levSubIAR1) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)
levSubIAR2 = subset(levIAR2, levIAR2$lv <2); nrow(levSubIAR2) # 1389 (573 unique) with IAR1; 1343 (555 unique(with IAR2)
## load IAR1 TCRs
IAR1Tcrs = read.csv("201512_TCR_MasterList_w_CloneIDs.csv", stringsAsFactors = F) # 5729
colnames(IAR1Tcrs) = gsub("tcrGraph_sharing_level", "sharing_level", colnames(IAR1Tcrs))
IAR1Tcrs = data.frame(IAR1Tcrs, set = "IAR1")
colNames = c("libid", "v_gene", "j_gene", "junction", "project", "donor_id", "set", "study_group", "full_nt_sequence")
IAR1Tcrs = IAR1Tcrs[c(colNames)]
IAR1Tcrs$study_group = gsub("early onset T1D", "newT1D", IAR1Tcrs$study_group)
## add HLA
hla = read_excel("subject_char_w_HLA.xlsx")
## correct donor id
hla$'Subject ID' = gsub('TID', "T1D", hla$'Subject ID')
## load ID key
idKey = read_excel("P91_P168 Sample_ID_key.xlsx")
idKey$tcrId = gsub("HC10, Ctrl10", "CTRL10", idKey$tcrId)
## remove whitespace
hla$'Subject ID' = stringr::str_trim(hla$'Subject ID')
idKey$suppTabId = stringr::str_trim(idKey$suppTabId)
IAR1Tcrs$donor_id = stringr::str_trim(IAR1Tcrs$donor_id)
## add suppTabId and then match HLA
IAR1Tcrs$suppTabId = idKey$suppTabId[match(IAR1Tcrs$donor_id, idKey$tcrId)]
IAR1Tcrs$hla = hla$DRB1[match(IAR1Tcrs$suppTabId, hla$"Subject ID")]
## check to see that HLA is present for most donos
temp = subset(IAR1Tcrs, is.na(IAR1Tcrs$hla)) # 0/5417.
unique(temp$donor_id) #0
tempa = subset(hla, hla$"Subject ID" == "CTRL10")
tempb = subset(IAR1Tcrs, IAR1Tcrs$donor_id == "CTRL10")
tempa$'Subject ID'
unique(tempb$donor_id)
colNames1 = c("libid", "v_gene", "j_gene", "junction", "project", "donor_id", "set", "study_group", "hla", "full_nt_sequence")
IAR1Tcrs = IAR1Tcrs[c(colNames1)]
## load IAR2 TCRs
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data")
anno.filename = "P325_P474_comb_CD4+_anno_w_hla.txt"
tcrs.filename = "P325_P474_comb_CD4+_TCR_w_hla.txt"
test1 = read.delim(anno.filename, stringsAsFactors = F)
test2 = read.delim(tcrs.filename, stringsAsFactors = F)
test2$donor_id = test1$donorId[match(test2$libid, test1$libid)]
test2$study_group = test1$studyGroup2[match(test2$libid, test1$libid)]
test2$study_group = gsub("roT1D", "newT1D", test2$study_group)
test2 = subset(test2, !study_group == "estT1D")
IAR2Tcrs = data.frame(test2, set = "IAR2")
IAR2Tcrs$hla = test1$hla[match(IAR2Tcrs$donor_id, test1$donorId)]
colNames = c("libid", "v_gene", "j_gene", "junction", "project", "donor_id", "set", "study_group", "hla", "full_nt_sequence")
IAR2Tcrs = IAR2Tcrs[c(colNames)]
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_code")
## combine set 1 amd set2
tcrsComb = rbind(IAR1Tcrs, IAR2Tcrs) # 7727
tcrsComb$studyGroup = tcrsComb$study_group
tcrsComb$studyGroup = factor(tcrsComb$studyGroup, levels = c("HC", "AAbNeg", "1AAb", "2AAb",  "newT1D", "T1D" ))
## save tcrsComb as Supplemental Table for manuscript
toSave = tcrsComb
toSave$set = gsub("IAR1", "Cohort1", toSave$set)
toSave$set = gsub("IAR2", "Cohort2", toSave$set)
table(toSave$set )
#setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data")
#filename = "Table_S4_Compiled_and_filtered_TCR_sequences_used_in_this_study.csv"
#write.csv(toSave, filename)
## subset tcrsComb by HLA, if desired
#tcrsComb = subset(tcrsComb, tcrsComb$hla %in% grep("04", tcrsComb$hla, value = T)) # 3626 for "04"; 4101 for NOT 04
## determine expanded TCRs
no =  ddply(tcrsComb,.(junction), plyr::summarize, sum = length(libid)) # 6529 junctions, sum(no$sum) = 7727
cut <- 2
no.sub = subset(no, sum>=cut) # 474
E = subset(tcrsComb, junction %in% no.sub$junction) # 855 E junctions, 135 unique
libs = E$libid
E.cell = subset(tcrsComb, tcrsComb$libid %in% libs) # 956
E.cell$study_group = tcrsComb$study_group[match(E.cell$libid, tcrsComb$libid)] # 1954
frxn.e = length(unique(E.cell$libid))/length(unique(tcrsComb$libid)) # 24.4%
table(E.cell$studyGroup)
#HC AAbNeg   1AAb   2AAb newT1D    T1D
# 284     23     56    101    812    678 # all tcrs, not subsetted
#   267      8     21     31    119    510 # hla  "04" subset
## add expanded cells to tcrsComb
tcrsComb$E = tcrsComb$libid %in% E.cell$libid # 1954 TRUE 5773 FALSE for junctions;
tcrsComb$expanded = tcrsComb$E
tcrsComb$expanded = gsub("TRUE", "E", tcrsComb$expanded)
tcrsComb$expanded = gsub("FALSE", "NE", tcrsComb$expanded)
tcrsComb$chainType = ifelse(tcrsComb$v_gene %in% grep("TRA", tcrsComb$v_gene, value = T), "TRA",
ifelse(tcrsComb$v_gene %in% grep("TRB", tcrsComb$v_gene, value = T), "TRB","other"))
## remove iNKT and MAIT cell sequencces
iNkt1 = subset(tcrsComb, junction == "CVVSDRGSTLGRLYF")
iNkt2 = subset(tcrsComb, libid %in% iNkt1$libid)
mait1 = subset(tcrsComb, v_gene == "TRAV1-2" & (j_gene == "TRAJ33" | j_gene == "TRAJ20" | j_gene == "TRAJ12")) # 18
mait2 = subset(tcrsComb, libid %in% mait1$libid) # 45
tcrsCombSub3 = subset(tcrsComb, !junction %in% iNkt2$junction) #
tcrsCombSub3 = subset(tcrsCombSub3, !junction %in% mait2$junction) # 7633
## statistics on TCRs by cohort
temp = tcrsCombSub3
table(temp$set)
#IAR1 IAR2
#5338 2295
table(temp$set)
#IAR1 IAR2
#5338 2295
table(temp$set, temp$chainType)
#       other  TRA  TRB
#  IAR1    23 2725 2590
#  IAR2     9 1182 1104
table(temp$chainType)
#other   TRA   TRB
#   32  3907  3694
length(unique(temp$libid))
#[1] 3923
length(unique(temp$donor_id))
#[1] 84
## modify combined TCRs
tcrsCombSub3$PITmatch = tcrsCombSub3$junction %in% levSubIAR1$aJunc1 | tcrsCombSub3$junction %in% levSubIAR2$aJunc1 # 1235 T, 6398 F
tcrsCombSub3$expanded = factor(tcrsCombSub3$expanded, levels = c("E", "NE")) #
tcrsCombSub3Tra = subset(tcrsCombSub3, tcrsCombSub3$chainType == "TRA") # 3907
tcrsCombSub3Tra.u = tcrsCombSub3Tra[!duplicated(tcrsCombSub3Tra$junction),] # 3264
tcrsCombSub3.u = tcrsCombSub3[!duplicated(tcrsCombSub3$junction),] # 6481
tcrsTra = subset(tcrsCombSub3.u, chainType == "TRA") # 1512
tcrsTrb = subset(tcrsCombSub3.u, chainType == "TRB") # 1433
tcrsCombSub3Tra$studyGroup = gsub("AAbNeg", "HC", tcrsCombSub3Tra$studyGroup)
## select TCR subset to use
#all = subset(tcrsCombSub3, set == "IAR1") # 5338
all = tcrsCombSub3 # 7633
all.u = all[!duplicated(all$junction),] # 4331 for IAR1, 6481 for both
toPlot = all # 7633
## add pgen scores to all
toPlot$pgen = pgen$pgen[match(toPlot$junction, pgen$junction)]
## subset TRA and TRB
toPlotTra = subset(toPlot, chainType == "TRA") # 3907 unique
toPlotTrb = subset(toPlot, chainType == "TRB") # 3694
#toPlotTrb$PITmatch = ifelse(toPlotTrb$libid %in% traMatchT$libid, "TRUE", "FALSE") # 1104 TRUE, 2590 FALSE
## select TCRs to use
traMatchT = subset(toPlotTra,PITmatch == "TRUE") # 1235
traMatchF = subset(toPlotTra,PITmatch == "FALSE") # 2672
## identify subset of TRB chains that pair with PITmatched TRA chains & add PIT matching status for TRA chains
toPlotTrb = subset(toPlot, libid %in% toPlotTra$libid & chainType == "TRB") # 3270
toPlotTrb$PITmatch = ifelse(toPlotTrb$libid %in% traMatchT$libid, "TRUE", "FALSE") # 2166 TRUE, 1104 FALSE
## subset to PITmatch T and F
#trbMatchT = subset(toPlot,PITmatch == "TRUE") # 1235
#trbMatchF = subset(toPlot,PITmatch == "FALSE") # 6398
trbMatchT = subset(toPlotTrb,PITmatch == "TRUE") # 1104
trbMatchF = subset(toPlotTrb,PITmatch == "FALSE") # 2166
######################
## compare TRA overlap at nucleotide and protein levels
var = all # 7633
var1Name = c("TRA")
## load junction nt sequences
## compare segment sequence features for PIT matching and non-matching TRA chains
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
imgt1 = read.delim("P91_3_Nt-sequences.txt", stringsAsFactors = F)
imgt1$set = c('IAR1')
seqId1 = data.frame(strsplit2(imgt1$Sequence.ID, split = "_"))
colnames(seqId1) = c("libid", "junction")
imgt1 = cbind(seqId1, imgt1)
imgt2 = read.delim("P325_P474_3_Nt-sequences.txt", stringsAsFactors = F)
imgt2$set = c('IAR2')
## add junction and libid to imgt2
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data") # folder containing data required to generate figures
imgt2Tcrs = read.delim("P325_P474_CD4_unique_TCRs.txt", stringsAsFactors = F)
seqId2 = data.frame(imgt2Tcrs$libid, imgt2Tcrs$junction)
colnames(seqId2) = c("libid", "junction")
imgt2 = cbind(seqId2, imgt2)
imgt1AA =  read.delim("P91_5_AA-sequences.txt", stringsAsFactors = F)
imgt1AA$set = c('IAR1')
imgt2AA =  read.delim("P325_P474_5_AA-sequences.txt", stringsAsFactors = F)
imgt2AA$set = c('IAR2')
imgt2AA$X = NULL
imgt = rbind(imgt1, imgt2) # 6385
imgtAA = rbind(imgt1AA, imgt2AA)# 6385
## check on id order
all(imgt$Sequence.number == imgtAA$Sequence.number)
#[1] TRUE
table(imgt$set)
#IAR1 IAR2
#3168 2921
table(imgtAA$set)
#IAR1 IAR2
#3168 3217 ## why not the same as nt?
## add protein sequence to imgt
imgt$junction = imgtAA$JUNCTION[match(imgt$Sequence.number, imgtAA$Sequence.number)]
imgt$PITmatch = imgt$junction %in% levSubIAR1$aJunc1 | imgt$junction %in% levSubIAR2$aJunc1 # 1235 T, 6398 F
imgt$chainType = ifelse(imgt$V.GENE.and.allele %in% grep("TRA", imgt$V.GENE.and.allele, value = T), "TRA",
ifelse(imgt$V.GENE.and.allele %in% grep("TRB", imgt$V.GENE.and.allele, value = T), "TRB", "other"))
imgt = subset(imgt, !chainType == "other") #6089
#imgt = subset(imgt, set == "IAR2") # for troubleshooting
imgt = subset(imgt, !(set == "IAR2" & chainType == "TRB" & PITmatch == "TRUE")) # these shouldn't be here. remove from analysis
table(imgt$set, imgt$chainType)
#        TRA  TRB
#  IAR1 1606 1562
#  IAR2 1620 1301
# table(imgt$set, imgt$PITmatch)
#       FALSE TRUE
#  IAR1  2595  573
#  IAR2  2624  297
## subset by junction
var = subset(var, chainType == var1Name) # 3907 TRA 3694 TRB
var$PITmatch = gsub("TRUE", "PIT-matched", var$PITmatch)
var$PITmatch = gsub("FALSE", "non-PIT-matched", var$PITmatch)
if (var1Name == "TRB") {
var$PITmatch = ifelse(var$libid %in% traMatchT$libid, "TRUE", "FALSE") # 1104 TRUE, 2590 FALSE
}
## subset to E junctions if desired
sub = var #3907
#sub = var[var$libid %in% E.cell$libid,] # 1000 TRA, 874 TRB
sub$ntJunction = sub$full_nt_sequence
## aggregate shared junctions per donor
protShare =  ddply(sub,.(junction,  PITmatch, E), plyr::summarize, sum = length(unique(donor_id))) # 3264 TRA, 3210 TRB protein. sum(protShare$sum) = 3360 TRA, 3238 TRB
ntShare =  ddply(sub,.(ntJunction, junction, PITmatch, E), plyr::summarize, sum = length(unique(donor_id))) # 3388 TRA, 3232 TRB protein. sum(ntShare$sum) = 3405 TRA, 3243 TRB
paired = merge(protShare, ntShare, by = "junction")
ratio = data.frame(paired$junction, paired$sum.x/paired$sum.y)
colnames(ratio) = c("junction", "ratio")
ratioTRA = ratio # change to ratioTRB when needed
protShare$ratio = ratio$ratio[match(protShare$junction, ratio$junction)]
ntShare$ratio = ratio$ratio[match(ntShare$junction, ratio$junction)]
ntShare$ntJunction = NULL
all(paired$donor_id.x == paired$donor_id.y) # TRUE TRA; TRUE TRB
all(paired$PITmatch.x == paired$PITmatch.y) # TRUE TRA; FALSE TRB
all(paired$sum.x == paired$sum.y) # FALSE TRA; FALSE TRB
all(paired$E.x == paired$E.y) # TRUE TRA; TRUE  TRB
paired$E.x = gsub("TRUE", "Expanded", paired$E.x)
paired$E.x = gsub("FALSE", "non-Expanded", paired$E.x)
## protein level
oneDonorProt = subset(protShare, sum == 1) # 3188 TRA; 3183 TRB
multDonorProt = subset(protShare, sum > 1) # 76 TRA; 27 TRB
## significance on one versus multi by chain
a = c(3188, 76) # one versus multi for TRA
b = c(3183, 27) # one versus multi for TRB
c = cbind(a,b)
fisher.test(c) # 1.302e-06 for all
View(ntShare)
table(ntShare$E, ntShare$ratio)
View(paired)
table(paired$E, paired$ratio)
View(toPlot)
View(protShare)
View(paired)
all(paired$E.x)
toPlot = paired
toPlot$mutProt = toPlot$sum.x >1
View(toPlot)
table(toPlot$mutProt)
toPlot$mutProt = NULL
toPlot = paired
toPlot$multProt = toPlot$sum.x >1
table(toPlot$mutProt, toPlot$E.x)
table(toPlot$mutProt)
table(toPlot$multProt, toPlot$E.x)
multProt
toPlot = paired
toPlot$multProt = toPlot$sum.x >1
ggplot(toPlot, aes(sum.y)) + geom_density(aes(fill = multProt)) + facet_wrapl(~E)
ggplot(toPlot, aes(sum.y)) + geom_density(aes(fill = multProt)) + facet_wrap(~E)
ggplot(toPlot, aes(sum.y)) + geom_density(aes(fill = multProt)) + facet_wrap(~E.x)
if(dev.cur()>1) dev.off()
quartz(width=20,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 6))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(toPlot, aes(sum.y)) + geom_density(aes(fill = multProt),, aes = 0.f) + facet_wrap(~E.x)
ggplot(toPlot, aes(sum.y)) + geom_density(aes(fill = multProt), aes = 0.5) + facet_wrap(~E.x)
ggplot(toPlot, y = (sum.y)) + geom_density(aes(fill = multProt), aes = 0.5) + facet_wrap(~E.x)
ggplot(toPlot, y = sum.y) + geom_density(aes(fill = multProt), aes = 0.5) + facet_wrap(~E.x)
ggplot(toPlot, aes(y = sum.y)) + geom_density(aes(fill = multProt), aes = 0.5) + facet_wrap(~E.x)
ggplot(toPlot, aes(x = sum.y)) + geom_density(aes(fill = multProt), aes = 0.5) + facet_wrap(~E.x)
ggplot(toPlot, aes(x = sum.y)) + geom_density(aes(fill = multProt), aes = 0.5)) + facet_wrap(~E.x)
ggplot(toPlot, aes(x = sum.y)) + geom_density(aes(fill = multProt, aes = 0.5)) + facet_wrap(~E.x)
ggplot(toPlot, aes(x = sum.y))
last_plot + geom_density(aes(fill = multProt))
last_plot + geom_density()
ggplot(toPlot, aes(x = sum.y))
last_plot + geom_density()
